# Name of your application. Used to uniquely configure containers.
service: curriculum_library_api

  # Name of the container image.
image: scervera/curriculum_library_api

# Deploy to these servers.
servers:
  web:
    - cloud.cerveras.com
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# SSL is handled by the proxy server (curriculum-library-api.cerveras.com)
# Kamal will run the app without SSL since the proxy handles termination
proxy:
  host: curriculum-library-api.cerveras.com
  ssl: false

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: registry.digitalocean.com/cervera
  username: do_access_token

  # Always use an access token rather than real password when possible.
  # Kamal will read this from the environment variable
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - KAMAL_REGISTRY_PASSWORD
    - DATABASE_PASSWORD
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    # SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Database configuration
    DATABASE_URL: postgresql://curriculum_library_api:${DATABASE_PASSWORD}@curriculum-library-api.cerveras.com:5432/curriculum_library_api_production
    
    # Redis configuration
    REDIS_URL: redis://curriculum-library-api.cerveras.com:6379/0
    
    # Rails configuration
    RAILS_ENV: production
    RAILS_SERVE_STATIC_FILES: true
    RAILS_LOG_LEVEL: info
    
    # Additional Rails configuration
    RAILS_MAX_THREADS: 5
    WEB_CONCURRENCY: 1
    
    # CORS configuration - allow frontend domains
    ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:3001,http://localhost:4000,https://curriculum.cerveras.com,https://curriculum-library-api.cerveras.com,https://mdn-video-library-app.vercel.app"








# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "curriculum_library_api_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: 3.2.6
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:15
    host: curriculum-library-api.cerveras.com
    port: "5432:5432"
    env:
      clear:
        POSTGRES_DB: curriculum_library_api_production
        POSTGRES_USER: curriculum_library_api
        POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    directories:
      - data:/var/lib/postgresql/data
      
  redis:
    image: redis:7.0
    host: curriculum-library-api.cerveras.com
    port: 6379
    directories:
      - data:/data
